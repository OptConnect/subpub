#!/bin/sh
#
# prospero Prospero Server
#
# chkconfig: - 80 05
# description: Enable Prospero Server provided by eCollege EI
#

export HOME=/root

# resolve links - $0 may be a softlink
scriptname="$0"
while [ -h "$scriptname" ]; do
  ls=`ls -ld "$scriptname"`
  link=`expr "$ls" : '.*-> \(.*\)$'`
  if expr "$link" : '/.*' > /dev/null; then
    scriptname="$link"
  else
    scriptname=`dirname "$scriptname"`/"$link"
  fi
done

scriptdir=`dirname "$scriptname"`
scriptdir=`cd "${scriptdir}";pwd` # get absolute path

. "$scriptdir/always_included.sh"

### BEGIN INIT INFO
# Provides:          Prospero
# Required-Start:    $remote_fs $network
# Required-Stop:     $remote_fs $network
# Default-Start:
# Default-Stop:
# Description:       Prospero
# Short-Description: Enable Prospero Server provided by eCollege EI
### END INIT INFO

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DAEMON=${sbindir}/prospero-start
SERVERIN=${sbindir}/prospero-server-in
STOP_DAEMON=${sbindir}/prospero-stop
ROTATE_DAEMON=${sbindir}/prospero-rotate
NAME=prospero
DESC=prospero
USER=root

DEFAULTS_FILE= # This is filled in when building packages
LOCK_FILE= # This is filled in when building packages

test -x $DAEMON || exit 0

# Include rabbitmq defaults if available
if [ -f "$DEFAULTS_FILE" ] ; then
	. $DEFAULTS_FILE
fi

RETVAL=0
set -e

start_rabbitmq () {
    set +e
    $DAEMON
    case "$?" in
      0)
        echo SUCCESS
        [ -n "$LOCK_FILE" ] && touch $LOCK_FILE
        sleep 2
        $SERVERIN
        RETVAL=0
        ;;
      *)
        echo FAILED
        RETVAL=1
        ;;
    esac
    set -e
}

stop_rabbitmq () {
    set +e
    status_rabbitmq quiet
    if [ $RETVAL = 0 ] ; then
        $STOP_DAEMON
        RETVAL=$?
        if [ $RETVAL = 0 ] ; then
            [ -n "$LOCK_FILE" ] && rm -rf $LOCK_FILE
        else
            echo FAILED
        fi
    else
        echo No nodes running 
        RETVAL=0
    fi
    set -e
}

status_rabbitmq() {
    set +e
    set -e
}

rotate_logs_rabbitmq() {
    set +e
    $ROTATE_DAEMON
    if [ $? != 0 ] ; then
        RETVAL=1
    fi
    set -e
}

restart_rabbitmq() {
    stop_rabbitmq	    
    start_rabbitmq
}

case "$1" in
    start)
        echo -n "Starting $DESC: "
        start_rabbitmq
        echo "$NAME."
        ;;
    stop)
        echo -n "Stopping $DESC: "
        stop_rabbitmq
        echo "$NAME."
        ;;
    status)
        status_rabbitmq
        ;;
    rotate-logs)
        echo -n "Rotating log files for $DESC: "
        rotate_logs_rabbitmq
        ;;
    force-reload|reload|restart|condrestart|try-restart)
        echo -n "Restarting $DESC: "
        restart_rabbitmq
        echo "$NAME."
        ;;
    *)
        echo "Usage: $0 {start|stop|status|rotate-logs|restart|condrestart|try-restart|reload|force-reload}" >&2
        RETVAL=1
        ;;
esac

exit $RETVAL

